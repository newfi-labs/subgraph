// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdvisorOnBoarded extends ethereum.Event {
  get params(): AdvisorOnBoarded__Params {
    return new AdvisorOnBoarded__Params(this);
  }
}

export class AdvisorOnBoarded__Params {
  _event: AdvisorOnBoarded;

  constructor(event: AdvisorOnBoarded) {
    this._event = event;
  }

  get advisor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get stablePool(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get volatilePool(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get stablePoolToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get volatilePoolToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get stablePoolShare(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get volatilePoolShare(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get mstableInvestmentProportion(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get yearnInvestmentProportion(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class Investment extends ethereum.Event {
  get params(): Investment__Params {
    return new Investment__Params(this);
  }
}

export class Investment__Params {
  _event: Investment;

  constructor(event: Investment) {
    this._event = event;
  }

  get investor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _stablecoinAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _volatileAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _advisor(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ProtocolInvestment extends ethereum.Event {
  get params(): ProtocolInvestment__Params {
    return new ProtocolInvestment__Params(this);
  }
}

export class ProtocolInvestment__Params {
  _event: ProtocolInvestment;

  constructor(event: ProtocolInvestment) {
    this._event = event;
  }

  get advisor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mstableShare(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get yearnShare(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ProxyCreated extends ethereum.Event {
  get params(): ProxyCreated__Params {
    return new ProxyCreated__Params(this);
  }
}

export class ProxyCreated__Params {
  _event: ProxyCreated;

  constructor(event: ProxyCreated) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unwind extends ethereum.Event {
  get params(): Unwind__Params {
    return new Unwind__Params(this);
  }
}

export class Unwind__Params {
  _event: Unwind;

  constructor(event: Unwind) {
    this._event = event;
  }

  get advisor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fess(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewfiAdvisor__advisorInfoResult {
  value0: string;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: string,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }
}

export class NewfiAdvisor__investorInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class NewfiAdvisor extends ethereum.SmartContract {
  static bind(address: Address): NewfiAdvisor {
    return new NewfiAdvisor("NewfiAdvisor", address);
  }

  advisorInfo(param0: Address): NewfiAdvisor__advisorInfoResult {
    let result = super.call(
      "advisorInfo",
      "advisorInfo(address):(string,address,address,address,address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new NewfiAdvisor__advisorInfoResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt()
    );
  }

  try_advisorInfo(
    param0: Address
  ): ethereum.CallResult<NewfiAdvisor__advisorInfoResult> {
    let result = super.tryCall(
      "advisorInfo",
      "advisorInfo(address):(string,address,address,address,address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NewfiAdvisor__advisorInfoResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt()
      )
    );
  }

  advisors(param0: BigInt): Address {
    let result = super.call("advisors", "advisors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_advisors(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("advisors", "advisors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployMinimal(_logic: Address, _data: Bytes): Address {
    let result = super.call(
      "deployMinimal",
      "deployMinimal(address,bytes):(address)",
      [ethereum.Value.fromAddress(_logic), ethereum.Value.fromBytes(_data)]
    );

    return result[0].toAddress();
  }

  try_deployMinimal(
    _logic: Address,
    _data: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployMinimal",
      "deployMinimal(address,bytes):(address)",
      [ethereum.Value.fromAddress(_logic), ethereum.Value.fromBytes(_data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  investorInfo(param0: Address): NewfiAdvisor__investorInfoResult {
    let result = super.call(
      "investorInfo",
      "investorInfo(address):(uint256,uint256,address,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new NewfiAdvisor__investorInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBoolean()
    );
  }

  try_investorInfo(
    param0: Address
  ): ethereum.CallResult<NewfiAdvisor__investorInfoResult> {
    let result = super.tryCall(
      "investorInfo",
      "investorInfo(address):(uint256,uint256,address,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NewfiAdvisor__investorInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBoolean()
      )
    );
  }

  investors(param0: BigInt): Address {
    let result = super.call("investors", "investors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_investors(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("investors", "investors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  massetAddress(): Address {
    let result = super.call("massetAddress", "massetAddress():(address)", []);

    return result[0].toAddress();
  }

  try_massetAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "massetAddress",
      "massetAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  savingContract(): Address {
    let result = super.call("savingContract", "savingContract():(address)", []);

    return result[0].toAddress();
  }

  try_savingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "savingContract",
      "savingContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stableProxyBaseAddress(): Address {
    let result = super.call(
      "stableProxyBaseAddress",
      "stableProxyBaseAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stableProxyBaseAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stableProxyBaseAddress",
      "stableProxyBaseAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  volatileProxyBaseAddress(): Address {
    let result = super.call(
      "volatileProxyBaseAddress",
      "volatileProxyBaseAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_volatileProxyBaseAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "volatileProxyBaseAddress",
      "volatileProxyBaseAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _stableproxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _volatileproxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _massetAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _savingsContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployMinimalCall extends ethereum.Call {
  get inputs(): DeployMinimalCall__Inputs {
    return new DeployMinimalCall__Inputs(this);
  }

  get outputs(): DeployMinimalCall__Outputs {
    return new DeployMinimalCall__Outputs(this);
  }
}

export class DeployMinimalCall__Inputs {
  _call: DeployMinimalCall;

  constructor(call: DeployMinimalCall) {
    this._call = call;
  }

  get _logic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeployMinimalCall__Outputs {
  _call: DeployMinimalCall;

  constructor(call: DeployMinimalCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InvestCall extends ethereum.Call {
  get inputs(): InvestCall__Inputs {
    return new InvestCall__Inputs(this);
  }

  get outputs(): InvestCall__Outputs {
    return new InvestCall__Outputs(this);
  }
}

export class InvestCall__Inputs {
  _call: InvestCall;

  constructor(call: InvestCall) {
    this._call = call;
  }

  get _stablecoin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stablecoinAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _advisor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stableProportion(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _volatileProportion(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InvestCall__Outputs {
  _call: InvestCall;

  constructor(call: InvestCall) {
    this._call = call;
  }
}

export class OnboardCall extends ethereum.Call {
  get inputs(): OnboardCall__Inputs {
    return new OnboardCall__Inputs(this);
  }

  get outputs(): OnboardCall__Outputs {
    return new OnboardCall__Outputs(this);
  }
}

export class OnboardCall__Inputs {
  _call: OnboardCall;

  constructor(call: OnboardCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _stableCoinAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _stablecoin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _mstableInvestmentProportion(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _yearnInvestmentProportion(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class OnboardCall__Outputs {
  _call: OnboardCall;

  constructor(call: OnboardCall) {
    this._call = call;
  }
}

export class ProtocolInvestmentCall extends ethereum.Call {
  get inputs(): ProtocolInvestmentCall__Inputs {
    return new ProtocolInvestmentCall__Inputs(this);
  }

  get outputs(): ProtocolInvestmentCall__Outputs {
    return new ProtocolInvestmentCall__Outputs(this);
  }
}

export class ProtocolInvestmentCall__Inputs {
  _call: ProtocolInvestmentCall;

  constructor(call: ProtocolInvestmentCall) {
    this._call = call;
  }

  get _mstableInvestmentAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _mstableInvestmentAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _yearnInvestmentAmounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _yearnVaults(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class ProtocolInvestmentCall__Outputs {
  _call: ProtocolInvestmentCall;

  constructor(call: ProtocolInvestmentCall) {
    this._call = call;
  }
}

export class UnwindCall extends ethereum.Call {
  get inputs(): UnwindCall__Inputs {
    return new UnwindCall__Inputs(this);
  }

  get outputs(): UnwindCall__Outputs {
    return new UnwindCall__Outputs(this);
  }
}

export class UnwindCall__Inputs {
  _call: UnwindCall;

  constructor(call: UnwindCall) {
    this._call = call;
  }

  get _advisor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vault(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _stablecoin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class UnwindCall__Outputs {
  _call: UnwindCall;

  constructor(call: UnwindCall) {
    this._call = call;
  }
}
